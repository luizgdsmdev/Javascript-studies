{
  "1": [
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "Objects in JavaScript are unordered collections of key-value pairs.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "Object keys in JavaScript can only be strings.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "An object declared with `const` cannot have its properties modified.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "Accessing a non-existent property in an object returns `undefined`.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "The `typeof` operator returns 'object' for an object in JavaScript.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "Objects can be created using the object literal syntax `{}`.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "Bracket notation `object['key']` can be used to access properties dynamically.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "Objects in JavaScript are copied by value when assigned to a new variable.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "The `delete` operator can remove any property from an object, including inherited ones.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "easy",
      "question": [
        {
          "question": "Objects can contain other objects as property values.",
          "answer": true
        }
      ]
    }
  ],
  "2": [
    {
      "type": 1,
      "level": "medium",
      "question": [
        {
          "question": "Assigning an object to a new variable creates a reference to the same object in memory.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "medium",
      "question": [
        {
          "question": "The `Object.keys()` method modifies the original object.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "medium",
      "question": [
        {
          "question": "The `Object.seal()` method prevents modifications to existing object properties.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "medium",
      "question": [
        {
          "question": "The `delete` operator returns `true` when a non-existent property is deleted.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "medium",
      "question": [
        {
          "question": "The `Object.create()` method allows creating objects with a specified prototype.",
          "answer": true
        }
      ]
    },
    {
      "type": 1,
      "level": "medium",
      "question": [
        {
          "question": "Factory functions use prototype inheritance to share methods between objects.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "medium",
      "question": [
        {
          "question": "The spread operator (`...`) creates a deep copy of an object.",
          "answer": false
        }
      ]
    },
    {
      "type": 2,
      "level": "medium",
      "question": [
        {
          "question": "What is the result of `let obj = { a: 1, b: 2 }; console.log(Object.keys(obj));`?",
          "options": {
            "1": "['a', 'b']",
            "2": "[1, 2]",
            "3": "{ a: 1, b: 2 }",
            "4": "undefined"
          },
          "answer": "1"
        }
      ]
    },
    {
      "type": 2,
      "level": "medium",
      "question": [
        {
          "question": "What does `let obj = { name: 'Luiz' }; delete obj.name; console.log(obj);` return?",
          "options": {
            "1": "{ name: 'Luiz' }",
            "2": "{}",
            "3": "undefined",
            "4": "null"
          },
          "answer": "2"
        }
      ]
    },
    {
      "type": 2,
      "level": "medium",
      "question": [
        {
          "question": "What is the result of `let obj = Object.create({ name: 'Luiz' }); console.log(obj.name);`?",
          "options": {
            "1": "'Luiz'",
            "2": "undefined",
            "3": "null",
            "4": "Error"
          },
          "answer": "1"
        }
      ]
    }
  ],
  "3": [
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What is the result of `let obj = { a: 1 }; Object.assign(obj, { b: 2 }); console.log(obj);`?",
          "options": {
            "1": "{ a: 1 }",
            "2": "{ b: 2 }",
            "3": "{ a: 1, b: 2 }",
            "4": "{}"
          },
          "answer": "3"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What does `let obj = { a: 1 }; Object.freeze(obj); obj.a = 2; console.log(obj.a);` return?",
          "options": {
            "1": "1",
            "2": "2",
            "3": "undefined",
            "4": "Error"
          },
          "answer": "1"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What is the result of `let obj = { a: 1 }; Object.seal(obj); obj.a = 2; console.log(obj);`?",
          "options": {
            "1": "{ a: 1 }",
            "2": "{ a: 2 }",
            "3": "{}",
            "4": "Error"
          },
          "answer": "2"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What does `let proto = { a: 1 }; let obj = Object.create(proto); console.log(obj.hasOwnProperty('a'));` return?",
          "options": {
            "1": "true",
            "2": "false",
            "3": "undefined",
            "4": "Error"
          },
          "answer": "2"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What is the result of `let obj = { a: 1, b: { c: 2 } }; let copy = JSON.parse(JSON.stringify(obj)); copy.b.c = 3; console.log(obj.b.c);`?",
          "options": {
            "1": "2",
            "2": "3",
            "3": "undefined",
            "4": "Error"
          },
          "answer": "1"
        }
      ]
    },
    {
      "type": 1,
      "level": "hard",
      "question": [
        {
          "question": "The `JSON.parse(JSON.stringify())` method can copy methods of an object.",
          "answer": false
        }
      ]
    },
    {
      "type": 1,
      "level": "hard",
      "question": [
        {
          "question": "The `Object.getOwnPropertyNames()` method returns both enumerable and non-enumerable own properties.",
          "answer": true
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What is the result of `let obj = { a: 1 }; Object.defineProperty(obj, 'b', { value: 2, enumerable: false }); console.log(Object.keys(obj));`?",
          "options": {
            "1": "['a', 'b']",
            "2": "['a']",
            "3": "['b']",
            "4": "[]"
          },
          "answer": "2"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What does `let entries = [['x', 10], ['y', 20]]; console.log(Object.fromEntries(entries));` return?",
          "options": {
            "1": "{ x: 10, y: 20 }",
            "2": "[['x', 10], ['y', 20]]",
            "3": "{ 10: 'x', 20: 'y' }",
            "4": "undefined"
          },
          "answer": "1"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What is the result of `let objA = { a: 1 }; let objB = objA; objB.a = 2; console.log(objA.a);`?",
          "options": {
            "1": "1",
            "2": "2",
            "3": "undefined",
            "4": "Error"
          },
          "answer": "2"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What does `let obj = { a: 1, b: 2 }; console.log(Object.entries(obj));` return?",
          "options": {
            "1": "[['a', 1], ['b', 2]]",
            "2": "['a', 'b']",
            "3": "[1, 2]",
            "4": "{ a: 1, b: 2 }"
          },
          "answer": "1"
        }
      ]
    },
    {
      "type": 1,
      "level": "hard",
      "question": [
        {
          "question": "The `Object.defineProperty()` method can make a property non-writable.",
          "answer": true
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What is the result of `let obj = { a: NaN }; console.log(Object.is(obj.a, NaN));`?",
          "options": {
            "1": "true",
            "2": "false",
            "3": "undefined",
            "4": "Error"
          },
          "answer": "1"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What does `let obj = { name: 'Luiz', details: { age: 29 } }; let copy = { ...obj }; copy.details.age = 30; console.log(obj.details.age);` return?",
          "options": {
            "1": "29",
            "2": "30",
            "3": "undefined",
            "4": "Error"
          },
          "answer": "2"
        }
      ]
    },
    {
      "type": 2,
      "level": "hard",
      "question": [
        {
          "question": "What is the result of `class A { constructor() { this.x = 1; } } let obj = new A(); console.log(obj.hasOwnProperty('x'));`?",
          "options": {
            "1": "true",
            "2": "false",
            "3": "undefined",
            "4": "Error"
          },
          "answer": "1"
        }
      ]
    }
  ]
}